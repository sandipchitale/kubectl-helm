# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI and release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run pkg --if-present
    - name: Create windows archive
      id: windows_archive
      run: /bin/tar --transform 's/.*\///g' -cvzf kubectl-tree_${{ github.ref_name }}_windows_amd64.tar.gz dist/win/bin/kubectl-helm.exe LICENSE
    - name: Create linux archive
      id: linux_archive
      run: /bin/tar --transform 's/.*\///g' -cvzf kubectl-tree_${{ github.ref_name }}_linux_amd64.tar.gz dist/linux/bin/kubectl-helm LICENSE
    - name: Create macos archive
      id: macos_archive
      run: /bin/tar --transform 's/.*\///g' -cvzf kubectl-tree_${{ github.ref_name }}_darwin_amd64.tar.gz dist/macos/bin/kubectl-helm LICENSE
    - name: Upload archives
      uses: actions/upload-artifact@v3
      with:
        name: archives
        path: |
          kubectl-tree_${{ github.ref_name }}_windows_amd64.tar.gz
          kubectl-tree_${{ github.ref_name }}_linux_amd64.tar.gz
          kubectl-tree_${{ github.ref_name }}_darwin_amd64.tar.gz
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')


